<templateSet group="Bloc">
  <template name="bloc" value="import 'package:bloc/bloc.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$FILE_NAME$.freezed.dart';&#10;part '$FILE_NAME$.g.dart';&#10;&#10;&#10;@freezed&#10;class $CLASSNAME$Event with _$$$CLASSNAME$Event {&#10;  const $CLASSNAME$Event._();&#10;&#10;  const factory $CLASSNAME$Event.create() = _Create$CLASSNAME$Event;&#10;&#10;  const factory $CLASSNAME$Event.resetBloc() = _Reset$CLASSNAME$Event;&#10;&#10;}&#10;&#10;@freezed&#10;class $CLASSNAME$State with _$$$CLASSNAME$State {&#10;  const $CLASSNAME$State._();&#10;  &#10;  const factory $CLASSNAME$State.initial() = _Initial$CLASSNAME$State;&#10;  &#10;  factory $CLASSNAME$State.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$CLASSNAME$StateFromJson(json);&#10;&#10;}&#10;&#10;class $CLASSNAME$ extends Bloc&lt;$CLASSNAME$Event, $CLASSNAME$State&gt; {&#10;  static const String tag = '$CLASSNAME$';&#10;&#10;&#10;  $CLASSNAME$() : super(const $CLASSNAME$State.initial());&#10;&#10;  @override&#10;  Stream&lt;$CLASSNAME$State&gt; mapEventToState($CLASSNAME$Event event) =&gt;&#10;    event.when&lt;Stream&lt;$CLASSNAME$State&gt;&gt;(&#10;      create: _create,&#10;      resetBloc: _reset,&#10;    );&#10;  &#10;  Stream&lt;$CLASSNAME$State&gt; _create() async* {&#10;    // ...    &#10;  }&#10;&#10;  &#10;  Stream&lt;$CLASSNAME$State&gt; _reset() async* {&#10;    yield $CLASSNAME$State.initial();&#10;  }&#10;&#10;}" description="bloc class" toReformat="true" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASSNAME" expression="capitalize(camelCase(FILE_NAME)) " defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bloc" value="true" />
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="cubit" value="import 'package:bloc/bloc.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$FILE_NAME$.freezed.dart';&#10;part '$FILE_NAME$.g.dart';&#10;&#10;&#10;@freezed&#10;class $CLASSNAME$State with _$$$CLASSNAME$State {&#10;  const $CLASSNAME$State._();&#10;  &#10;  const factory $CLASSNAME$State.initial() = _Initial$CLASSNAME$State;&#10;  &#10;  factory $CLASSNAME$State.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$$$CLASSNAME$StateFromJson(json);&#10;&#10;}&#10;&#10;&#10;class $CLASSNAME$ extends Cubit&lt;$CLASSNAME$State&gt; {&#10;  static const String tag = '$CLASSNAME$';&#10;  &#10;  final LogService _logService;&#10;&#10;&#10;  $CLASSNAME$({required LogService logService,}) :_logService=logService, super(const $CLASSNAME$State.initial());&#10;  &#10;  &#10;  @override&#10;  void onChange(change) {&#10;    _logService.debug(tag,&#10;        'onChange\n[CURRENT STATE]: ${change.currentState}\n[NEXT STATE]: ${change.nextState}');&#10;    super.onChange(change);&#10;  }&#10;  &#10;  void reset ()=&gt;emit(const $CLASSNAME$State.initial());&#10;  &#10;}" description="cubit class" toReformat="true" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASSNAME" expression="capitalize(camelCase(FILE_NAME)) " defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>