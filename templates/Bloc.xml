<templateSet group="Bloc">
  <template name="bloc" value="import 'package:bloc/bloc.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$fileNameWithoutExtension$.freezed.dart';&#10;&#10;@freezed&#10;abstract class $NAME$Event with _$$$NAME$Event {&#10;  const $NAME$Event._();&#10;&#10;  const factory $NAME$Event.create() = Create$NAME$Event;&#10;&#10;  const factory $NAME$Event.read() = Read$NAME$Event;&#10;&#10;  const factory $NAME$Event.update() = Update$NAME$Event;&#10;&#10;  const factory $NAME$Event.delete() = Delete$NAME$Event;&#10;}&#10;&#10;@freezed&#10;abstract class $NAME$State with _$$$NAME$State {&#10;  const $NAME$State._();&#10;  &#10;  const factory $NAME$State.initial() = Initial$NAME$State;&#10;}&#10;&#10;class $NAME$BLoC extends Bloc&lt;$NAME$Event, $NAME$State&gt; {&#10;  $NAME$BLoC() : super(const Initial$NAME$State());&#10;&#10;  @override&#10;  Stream&lt;$NAME$State&gt; mapEventToState($NAME$Event event) =&gt;&#10;    event.when&lt;Stream&lt;$NAME$State&gt;&gt;(&#10;      create: _create,&#10;      read: _read,&#10;      update: _update,&#10;      delete: _delete,&#10;    );&#10;  &#10;  Stream&lt;$NAME$State&gt; _create() async* {&#10;    // ...    &#10;  }&#10;&#10;  Stream&lt;$NAME$State&gt; _read() async* {&#10;    // ...&#10;  }&#10;&#10;  Stream&lt;$NAME$State&gt; _update() async* {&#10;    // ...&#10;  }&#10;&#10;  Stream&lt;$NAME$State&gt; _delete() async* {&#10;    // ...&#10;  }&#10;}" description="bloc class" toReformat="true" toShortenFQNames="true">
    <variable name="fileNameWithoutExtension" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bloc" value="true" />
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
</templateSet>